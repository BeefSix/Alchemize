services:
  db:
    image: postgres:15
    container_name: alchemize_db
    restart: unless-stopped
    volumes:
      - alchemize_postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=alchemize_db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d alchemize_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: alchemize_redis
    restart: unless-stopped
    volumes:
      - alchemize_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      target: web
    container_name: alchemize_web
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./app:/app/app
      - alchemize_hf_cache:/app/.cache/huggingface
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/alchemize_db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FIREBASE_CREDENTIALS_JSON=${FIREBASE_CREDENTIALS_JSON}
      - FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    deploy:
      resources:
        reservations:
          devices: [{ driver: nvidia, count: all, capabilities: [gpu] }]

  worker:
    build:
      context: .
      target: worker
    container_name: alchemize_worker
    restart: unless-stopped
    command: celery -A app.workers.tasks worker --loglevel=info
    volumes:
      - ./app:/app/app
      - alchemize_hf_cache:/app/.cache/huggingface
      # --- THIS IS THE NEW LINE ---
      - ./cookies.txt:/app/cookies.txt
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/alchemize_db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FIREBASE_CREDENTIALS_JSON=${FIREBASE_CREDENTIALS_JSON}
      - FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    deploy:
      resources:
        reservations:
          devices: [{ driver: nvidia, count: all, capabilities: [gpu] }]

  # (The rest of the file is the same)
  beat:
    build:
      context: .
      target: beat
    container_name: alchemize_beat
    restart: unless-stopped
    command: celery -A app.workers.tasks beat --loglevel=info
    volumes:
      - ./app:/app/app
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }

  frontend:
    build:
      context: .
      target: frontend
    container_name: alchemize_frontend
    restart: unless-stopped
    command: streamlit run app.py
    volumes:
      - ./app:/app/app
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://web:8000
    depends_on:
      - web

volumes:
  alchemize_postgres_data:
  alchemize_redis_data:
  alchemize_hf_cache: