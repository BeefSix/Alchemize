services:
  db:
    image: postgres:15
    container_name: alchemize_db
    restart: unless-stopped
    volumes:
      - alchemize_postgres_data:/var/lib/postgresql/data
    environment:
      # --- SECURITY FIX: Use variables from .env file ---
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: alchemize_redis
    restart: unless-stopped
    volumes:
      - alchemize_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      target: web
    container_name: alchemize_web
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    env_file:
      - .env # Load environment variables from .env file
    volumes:
      - ./app:/app/app
      - ./data/static:/app/static
    ports:
      - "8000:8000"
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }

  worker:
    build:
      context: .
      target: worker
    container_name: alchemize_worker
    restart: unless-stopped
    command: celery -A app.celery_app.celery_app worker --loglevel=info
    env_file:
      - .env # Load environment variables from .env file
    volumes:
      - ./app:/app/app
      - ./data/static:/app/static
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    deploy:
      resources:
        reservations:
          devices: [{ driver: nvidia, count: all, capabilities: [gpu] }]

  beat:
    build:
      context: .
      target: beat
    container_name: alchemize_beat
    restart: unless-stopped
    command: celery -A app.celery_app.celery_app beat --loglevel=info
    env_file:
      - .env # Load environment variables from .env file
    volumes:
      - ./app:/app/app
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }

  frontend:
    build:
      context: .
      target: frontend
    container_name: alchemize_frontend
    restart: unless-stopped
    volumes:
      - ./app:/app/app
      - ./.streamlit:/app/.streamlit
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://web:8000/api/v1
    depends_on:
      web:
        condition: service_healthy

volumes:
  alchemize_postgres_data:
  alchemize_redis_data: